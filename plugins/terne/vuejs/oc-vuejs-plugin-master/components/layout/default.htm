<script>
$(document).ready(function() {
    {% if withRouting %}

        Vue.use(VueRouter);

        var App = Vue.extend({
            components: parseComponentsList(JSON.parse('{{vueComponents|json_encode()|raw}}'))
        });

        var Router = new VueRouter({{router_options|json_encode|raw}});

        $( document ).ajaxSend(function() {
            $.oc.stripeLoadIndicator.show();
        });
        $( document ).ajaxComplete(function() {
            $.oc.stripeLoadIndicator.hide();
        });

        var routerMap = {
            '/': {
                component: {}
            },
            '/404': {
                component: getPageComponent("/404"),
            }
        };

        var baseUrl = "{{ baseUrl }}";
        if (baseUrl != '/') {
            baseUrl = '/' + baseUrl;
        }

        {% for page in pages %}
            {% if page.url != '/' %}
                var path = "{{ page.url }}";

                // if page is subpage of base layout page
                if (path.indexOf(baseUrl) === 0) {
                    if (baseUrl != '/') {
                        path = path.replace(baseUrl, "");
                    }
                    Router.on(path, {
                        component: getPageComponent("{{page.url}}"),
                    });
                }

            {% endif %}
        {% endfor %}

        //fix oc ajax framework request url
        Router.beforeEach( function (transition) {
            var path = transition.to.path;
            if (baseUrl != '/') {
                path = baseUrl + path;
            }

            $.ajaxSetup({
              url: path
            });

            transition.next();
        });

        Router.redirect({
          '*': '/404'
        });

        Router.map(routerMap);
        Router.start(App, '{{el}}');

        // multiple version of jQuery.getScript()
        $.getMultiScripts = function(arr, path) {
            var _arr = $.map(arr, function(scr) {
                return $.getScript( (path||"") + scr );
            });

            _arr.push($.Deferred(function( deferred ){
                $( deferred.resolve );
            }));

            return $.when.apply($, _arr);
        }

        // returns vue component for page
        function getPageComponent(url) {

            return function(resolve, reject) {
                //request page data (template, assets, vue components)
                $.ajax(url, {
                    cache: false,
                    success: function(data, status, request) {
                        //download and execute javascripts
                        $.getMultiScripts(data.assets.js).done(function() {
                            var components = parseComponentsList(data.components);
                            //return complete vue component
                            resolve({
                                template: data.template,
                                components: components,
                            });
                        });
                        //download and attach css styles
                        data.assets.css.forEach(function(item, i, arr) {
                            $('<link/>', {
                               rel: 'stylesheet',
                               type: 'text/css',
                               href: item
                            }).appendTo('head');
                        });
                    }
                });

            }
        };

    {% else %}

        var App = new Vue({
          el: '{{el}}',
          components: parseComponentsList(JSON.parse('{{vueComponents|json_encode()|raw}}'))
        });

    {% endif %}


    function parseComponentsList(components_arr) {
        //all page's vue components
        var components = {};
        for (var compTag in components_arr) {
            var compName = components_arr[compTag];
            components[compTag] = eval(compName);
        }

        return components
    }

});
</script>
